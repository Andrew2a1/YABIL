name: Test on Linux (gcc 11)

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-22.04
    container:
        image: andrew2a1/cpp_analysis_tools
    strategy:
      matrix:
        build_type: ["Release", "Debug"]
        parallel_use_tbb: ["with_tbb=True", "with_tbb=False"]
        native_optimizations: ["native_optimizations=True", "native_optimizations=False"]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Conan dependencies
        env:
          CC: gcc
          CXX: g++
        run: |
          conan install . \
            -pr:h=./conan/profiles/gcc \
            -pr:b=./conan/profiles/gcc \
            -s build_type=${{ matrix.build_type }} \
            -o yabil/*:${{ matrix.parallel_use_tbb }} \
            -o yabil/*:${{ matrix.native_optimizations }} \
            -o yabil/*:with_tests=True \
            --build=missing

      - name: Configure
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          cmake --preset conan-${BUILD_TYPE,,} \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=TRUE \
            -DCMAKE_VERBOSE_MAKEFILE=TRUE

      - name: Build
        working-directory: build/${{ matrix.build_type }}
        run: |
          cmake --build . -j "$(nproc)" --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: build/${{ matrix.build_type }}
        run: ctest --verbose -j "$(nproc)"

      - name: Run tests with Valgrind
        if: matrix.parallel_use_tbb == 'with_tbb=False' && matrix.native_optimizations == 'native_optimizations=False'
        working-directory: build/${{ matrix.build_type }}
        run: |
          for test in $(find -iname *_tests); do
            valgrind -s --exit-on-first-error=yes --error-exitcode=1 \
              --leak-check=full --show-leak-kinds=all ./${test}
          done
