#include <gtest/gtest.h>
#include <yabil/bigint/BigInt.h>

#include <limits>

using namespace yabil::bigint;

class BigIntAddOperator_tests : public ::testing::Test
{
};

TEST_F(BigIntAddOperator_tests, addTwoZeros)
{
    const BigInt big_int1, big_int2;
    EXPECT_EQ(0, (big_int1 + big_int2).to_int());
}

TEST_F(BigIntAddOperator_tests, addZeroAndNonZero)
{
    const BigInt big_int1, big_int2(20);
    EXPECT_EQ(20, (big_int1 + big_int2).to_int());
}

TEST_F(BigIntAddOperator_tests, addZeroAndNegative)
{
    const BigInt big_int1, big_int2(-20);
    EXPECT_EQ(-20, (big_int1 + big_int2).to_int());
}

TEST_F(BigIntAddOperator_tests, addTwoNonZero)
{
    const BigInt big_int1(50), big_int2(20);
    EXPECT_EQ(70, (big_int1 + big_int2).to_int());
}

TEST_F(BigIntAddOperator_tests, addTwoNonZeroWithOverflow)
{
    const BigInt big_int1(std::numeric_limits<bigint_base_t>::max()), big_int2(20);
    const std::vector<bigint_base_t> expected = {19, 1};
    EXPECT_EQ(expected, (big_int1 + big_int2).raw_data());
}

TEST_F(BigIntAddOperator_tests, addTwoLongNonZeroWithOverflow)
{
    const BigInt big_int1(std::vector<bigint_base_t>{std::numeric_limits<bigint_base_t>::max(),
                                                     std::numeric_limits<bigint_base_t>::max()});
    const BigInt big_int2(10);
    const std::vector<bigint_base_t> expected = {9, 0, 1};
    EXPECT_EQ(expected, (big_int1 + big_int2).raw_data());
}

TEST_F(BigIntAddOperator_tests, addTwoNegativeWithOverflow)
{
    const BigInt big_int1(std::vector<bigint_base_t>{std::numeric_limits<bigint_base_t>::max(),
                                                     std::numeric_limits<bigint_base_t>::max()},
                          Sign::Minus);
    const BigInt big_int2(-10);

    const std::vector<bigint_base_t> expected = {9, 0, 1};
    const auto result = big_int1 + big_int2;

    EXPECT_EQ(expected, result.raw_data());
    EXPECT_EQ(Sign::Minus, result.get_sign());
}

TEST_F(BigIntAddOperator_tests, addTwoWithDifferentSigns)
{
    for (int i = -10; i < 11; ++i)
    {
        const BigInt big_int1(i);
        const BigInt big_int2(-i);
        const auto result = big_int1 + big_int2;
        EXPECT_EQ(0, result.to_int());
    }
}

TEST_F(BigIntAddOperator_tests, addTwoWithDifferentSignsWithOverflow)
{
    const BigInt big_int1(std::vector<bigint_base_t>{0, std::numeric_limits<bigint_base_t>::max()}, Sign::Minus);
    const BigInt big_int2(std::numeric_limits<bigint_base_t>::max());

    const std::vector<bigint_base_t> expected = {1, std::numeric_limits<bigint_base_t>::max() - 1};
    const auto result = big_int1 + big_int2;

    EXPECT_EQ(expected, result.raw_data());
    EXPECT_EQ(Sign::Minus, result.get_sign());
}

TEST_F(BigIntAddOperator_tests, addTwoWithDifferentSignsWithOverflow_2)
{
    const BigInt big_int1(std::vector<bigint_base_t>{0, std::numeric_limits<bigint_base_t>::max()});
    const BigInt big_int2(std::numeric_limits<bigint_base_t>::max(), Sign::Minus);

    const BigInt expected(std::vector<bigint_base_t>{1, std::numeric_limits<bigint_base_t>::max() - 1});
    const auto result = big_int1 + big_int2;

    EXPECT_EQ(expected, result);
}

TEST_F(BigIntAddOperator_tests, addInPlaceTwoZeros)
{
    BigInt a, b;
    a += b;
    EXPECT_EQ(0, a.to_int());
}

TEST_F(BigIntAddOperator_tests, addInPlaceZeroAndNonZero)
{
    BigInt a, b(20);
    a += b;
    EXPECT_EQ(20, a.to_int());
}

TEST_F(BigIntAddOperator_tests, addInPlaceZeroAndNegative)
{
    BigInt a, b(-20);
    a += b;
    EXPECT_EQ(-20, a.to_int());
}

TEST_F(BigIntAddOperator_tests, addInPlaceTwoNonZero)
{
    BigInt a(50), b(20);
    a += b;
    EXPECT_EQ(70, a.to_int());
}

TEST_F(BigIntAddOperator_tests, addInPlaceWithDifferentSigns)
{
    for (int i = -10; i < 11; ++i)
    {
        BigInt a(i);
        const BigInt b(-i);
        a += b;
        EXPECT_EQ(0, a.to_int());
    }
}

TEST_F(BigIntAddOperator_tests, addInPlaceTwoLongNonZeroWithOverflow)
{
    BigInt big_int1(std::vector<bigint_base_t>{std::numeric_limits<bigint_base_t>::max(),
                                               std::numeric_limits<bigint_base_t>::max()});
    const BigInt big_int2(10);
    const std::vector<bigint_base_t> expected = {9, 0, 1};

    big_int1 += big_int2;
    EXPECT_EQ(expected, big_int1.raw_data());
}

TEST_F(BigIntAddOperator_tests, addInPlaceTwoNegativeWithOverflow)
{
    BigInt big_int1(std::vector<bigint_base_t>{std::numeric_limits<bigint_base_t>::max(),
                                               std::numeric_limits<bigint_base_t>::max()},
                    Sign::Minus);
    const BigInt big_int2(-10);

    const std::vector<bigint_base_t> expected = {9, 0, 1};

    big_int1 += big_int2;

    EXPECT_EQ(expected, big_int1.raw_data());
    EXPECT_EQ(Sign::Minus, big_int1.get_sign());
}

TEST_F(BigIntAddOperator_tests, canAddNegatedNumber)
{
    const BigInt a(12031023ULL, Sign::Minus);
    const BigInt b(10);

    const auto result = a + -(b);

    ASSERT_TRUE(result.is_int64());
    EXPECT_EQ(-12031033LL, result.to_int());
}

TEST_F(BigIntAddOperator_tests, addInPlaceSelf)
{
    BigInt a(std::numeric_limits<uint64_t>::max());
    a += a;
    EXPECT_EQ(a, BigInt("36893488147419103230"));
}

TEST_F(BigIntAddOperator_tests, addTwoHugeTheSameLength)
{
    const BigInt a(
        "92189714721838901283901285812749812672186437824612894729837281937912785496712461238912749825692169576298734912"
        "655692927139872198754891278372189547185621985467892173891279487129837912837");
    const BigInt expected(
        "18437942944367780256780257162549962534437287564922578945967456387582557099342492247782549965138433915259746982"
        "5311385854279744397509782556744379094371243970935784347782558974259675825674");

    const auto result = a + a;
    EXPECT_EQ(result, expected);
}

TEST_F(BigIntAddOperator_tests, addTwoHugeDifferentLength)
{
    const BigInt a(
        "92189714721838901283901285812749812672186437824612894729837281937912785496712461238912749825692169576298734912"
        "655692927139872198754891278372189547185621985467892173891279487129837912837");

    const BigInt b(
        "1843794294436778025678025716254996253443728756492257894596745638758255709934249224778254996513843391525974698"
        "2");

    const BigInt expected(
        "92189714721838901283901285812749812672186437824612894729837281937912785496730899181857117605948949833461284875"
        "190130214704794777700858734759772104284964477715674723856417921045097659819");

    const auto result = a + b;
    EXPECT_EQ(result, expected);
}

TEST_F(BigIntAddOperator_tests, addTwoHugeVaryInSize)
{
    const BigInt a(
        "92189714721838901283901285812749812999999996721864378246128947298372819379127854967124612389812749812999999996"
        "72186437824612894729127498256921695762987349128127498129999999967218643782461289472981274981299999999672186437"
        "82461289472981274981299999999672186437824612894729816957629873491281274911274981299999999672186437824612894729"
        "65569292713987219875489127837218954718522222222222226219854678929999999999812749812999999996721864378246128947"
        "299999999999173891279487129837912837");

    const BigInt b(
        "1843794294436778025678025716254996253443728756492257894596745638758255709934249224778254996513843391525974698"
        "2");

    const BigInt expected(
        "92189714721838901283901285812749812999999996721864378246128947298372819379127854967124612389812749812999999996"
        "72186437824612894729127498256921695762987349128127498129999999967218643782461289472981274981299999999672186437"
        "82461289472981274981299999999672186437824612894729816957629873491281274911274981299999999672186437824612894729"
        "65569292713987219875489127837218954736960165166590006476634936092549962534250037377922578942689320765828686046"
        "642492247781723856417921045097659819");

    const auto result = a + b;
    EXPECT_EQ(result, expected);
    EXPECT_EQ(result, b + a);
}

TEST_F(BigIntAddOperator_tests, addALargerThanB)
{
    const BigInt a(
        "92189714721838901283901285812749812994729127498256921695762987349128127499999967218643782461289472983728193791"
        "27854967124612389812749812999999996472912749825692169576298734912812744729127498256921695762987349128127413444"
        "72186437824612894729127498256921695762987347291274982569216957629873491281274491281274981299999999672186437824"
        "61289472981274981299999999672186437472912749825692169576298734912812744729127498256921695762987349128127411344"
        "82461289472981274981299999999672186437847291274982569216957629873491281274246128947298169576298734912812749112"
        "74981299999999672186437824612894472912749825692169576298734912812744729127498256921695762987349128127472341411"
        "65569292713987219875489127837218954718522222472912749825692169576298734912812742222222262198546789299999999998"
        "12749812999999996721847185222224729127498256926437824718522222472912749825692471852222247291274982569246128947"
        "2999999999991738912794871298472912749825692169576298734912812744729127498256921695762987349128127437912837");

    const BigInt b(
        "1843794294436778025678025716254996253443728756492257894596745638758255709934249224778254996513843391525974698"
        "2");

    const BigInt expected(
        "92189714721838901283901285812749812994729127498256921695762987349128127499999967218643782461289472983728193791"
        "27854967124612389812749812999999996472912749825692169576298734912812744729127498256921695762987349128127413444"
        "72186437824612894729127498256921695762987347291274982569216957629873491281274491281274981299999999672186437824"
        "61289472981274981299999999672186437472912749825692169576298734912812744729127498256921695762987349128127411344"
        "82461289472981274981299999999672186437847291274982569216957629873491281274246128947298169576298734912812749112"
        "74981299999999672186437824612894472912749825692169576298734912812744729127498256921695762987349128127472341411"
        "65569292713987219875489127837218954718522222472912749825692169576298734912812742222222262198546789299999999998"
        "12749812999999996721847185222224729127498256926437824718522222472912749825692471852222247291274982569246130791"
        "0942944367771995693052033848435447187113257092155244702369200327286226840749169478312952487562042697659819");

    const auto result = a + b;
    EXPECT_EQ(result, expected);
    EXPECT_EQ(result, b + a);
}

TEST_F(BigIntAddOperator_tests, addLongLongLong)
{
    const BigInt a(
        "69273083253173638063758060492771416973791162226124613310017543078865297262021766837027723008572055249399371065"
        "86749228697327405904921607519410139232476410666658110706817888671799402078111343492934879138589614184849696517"
        "20599187824204166306605346854148919490445433534153943454041436043862709214834761376144084954132335384378341266"
        "22814293382879293232341761596977850108438924759124077942447679275712495604657887670671020818366235287919242694"
        "60631502467146120983767241484498518198293199988420311184009512293023434944937497268352311382764757333907599997"
        "98633751662616244525236373554631033359841078385043711614172923809584799784849809019098370446659048006443890723"
        "78101463276146249456930773596630322230696319378366004068852115253912801266699122704244703966467665340955632189"
        "16701847267852975019381092791768878387767339638751678476003236519803164519476795925814613622757798433795651149"
        "73414942761345886134240518136545441221532969570373396325722163916729679722235661925815309627481932066899928853"
        "18066061657168761491398071179866301721495318262525778159778158428152117801587828675077905609524434029894274473"
        "34702954407324133940409124689276530484221036410753913673210512187610428535844164136821188998658342289316918869"
        "70765467772701330835056681811071680063191238267715748378258406396511779799201883545926325653109051463992798986"
        "18348839178417265096087861096126608741419988203411691966796042130067670977756576136506190463796957323822273035"
        "73233817381451842443081140549466314539902281379180451614372515387358441870501944314357233413013460009481432040"
        "23597513309985687329201658196650272991237453925522943336843310633830516273101915988394614788175017534062350183"
        "28015332897981966701122323082698215046323075255851217070661718932329650795267687868550159073775915993454782854"
        "26849637986308606008230577505107883822007597208002580312064151659681675539911819054882921264190734608512677976"
        "39024921652393763214947481954325337170366888492731403969797319616367630489335037973681378883352264314375601833"
        "23517172511619306912654299129169613942229880327787277694449136663892355368822736462735179020185418520283737223"
        "87555987740075967521581969679137620241415266300521699791539925233687444111086100440527773424336363572775637949"
        "67174727208472231051744046374682516067911878098899732048217801357137604589516461961631300929092212246651506600"
        "61515276056711930225010067077520315212346975549945001666565357232995695669682523264075932105920937500656253900"
        "11410652097107408772023890009892341836208269039797747239640597865017870992370066680152235260767666087985648096"
        "81033599232615068830879041885424476996285336437183193653140815225392099195894742046038703087931940850383342725"
        "54391194388280594447787201564588438904312763545475199509062853706107921097468247268824143518108628014521440683"
        "94412107968059973627894199970772860575870775181416246090569654393411601133185348791538514065558198720306636764"
        "55413230737777292523405660301414792673306661926882474805053528217785322515065040011031357022608327657665686558"
        "55618738866232220273249680214470331660064411633370735329067404565877056606185742426647912301643874734678553715"
        "41461334484910267107381754867052509774923499787699061905776228976523426047663577585227824090183822960871138008"
        "42020551319106172014810307285817811471599592552906662077174153625971477231114826013019784832074240941658803126"
        "39328797913234986652714219719797577498658965885544524452305263915662355369821146239152929165876844029592501128"
        "31093445174308157717666122818138079878174059227892684802885482309171905660333079360907768645809402541493946245"
        "91347030897572930768185963816008960895749549947813998688659236434038741957369983475621954353479288727221293951"
        "12006866370020365863212948161244775116838547837871179464393412444879062328120322914262975208410408000444762804"
        "52975822971402248173665637399674381089821753698411956078316823113816135432319651837554519295049108600702446947"
        "96453877346449454284124943021061772019251751025837155812288964774046165608283545626348141667230159944904189174"
        "319386414178383963686918973178155371981");

    const BigInt b(
        "28251485763823253957516696797756631431987771053751123892841853097253052212899565540056009379226650287068388815"
        "37569419090930322290815932958155021937990076884544662160003979104848637738089581061845019479487158818361649900"
        "27880667757028566499707122570216221699306722360027916750543838106173522524432349603846413546705368186662141272"
        "08391392645292411492335372038029616055045378025203697644481470525413304239007301421979444482719290954730418530"
        "68817333015684137054809631237065408157151007654046848717950637677032518574105181260968768492860412344881721730"
        "33259351200585970153547762118303943354872998926970060619822563036018555540589756380932441991432413638703036830"
        "68677520979483853731837984257499923827496775955447850238624346446159735295576228088948065436390441676284711904"
        "41100106098765225494047014126411820831972439709680792505673009972268647998978470455877075096275229435255336501"
        "53468978117353268109413511078030229945987786152061298971599315409940155486838698017456173686563177022210157555"
        "62365543433049552953679215690670526600122680522376418331252628570310056602260353091492720400246829189977755809"
        "26703913654150378456990154101451844426310342492773180570399778849097910636163122009074628560590874030111868932"
        "72061047895841107119964198997230516495787548617770476847794564573699088427350701995404870610543744649717941011"
        "05053622906373308813841051929867282727859859152140521138696100074464238200751748783456019760945989755681856913"
        "77890385026679913454114205609191838031687939005622577298178793245130303619279656724010626338695158014171473975"
        "99929164161967405898500200111203318391803545489077454079560390778969997452588005874138061416605371998073926638"
        "08509111220091823904857585370218479471765706372416665320722248806271113549692650297778742254262744724545967425"
        "71078430448528524667586870736782275655450531924825536570376713658063593500456337689102428411721416861195040061"
        "21706553657237124393557893718280483723778841710442857045678228460096074974354274116863659983798335807326853495"
        "22374511072570913784685332600122995190130330435876019715097765702111966190706658918231743582487865961748525072"
        "04430131539059218363498691243192952054870721416737556005530876193889555885787273340531484825806604838310852067"
        "60303287120435762276101648144081663800569371469701268733782479931398865059650112083349710918645893543940348486"
        "56776782780941580417459368115172616034277275120212464222868111466398799228780496224877762476488754777050873184"
        "54824757739768372082349224325204212851231452530974006062367793254447955414078618090465308415946842066845587225"
        "27401176830894744113589949839244250802711038785911515288141252361727348764064027585274276663939605264029305244"
        "08754242469935542134372144940933917157403617819978786510079467169188911425802567441122644821435145961313058921"
        "43872881375776678783671531969177874077297895437993763193092895108962147579550138448907201260549181586761870746"
        "08291480113783496981540910239753768157329750027979198638726912913801852519355788900095694565487248713464067673"
        "57185526415931475122798518924492965499663103300624421031169219315384556130668790758691286246769359824690237251"
        "00453980906817247607007364470082970909393906209835417831515239134660492778018324161429065818428601575392923539"
        "99632070220752284714501754647518669216087199202844356165293123670318522296437661848514511852605070506403643010"
        "72981726791771710106238830992349555731006007571992603861605995998784762211185674211626080002139965123974454972"
        "51703465710256689707557752586506118131199637944339811492518190326328611936942665791444129071447052804425615000"
        "12344223841699586760827702499313311815484403568695263589255527268666408001427459835768237897879519397521410536"
        "56165426281410811489825945298040362146444245189773927660411167041809024942888196128110710610145262611804627241"
        "75814818514323326788318073884882150447241111089237459119035036628258227212985468231484354096850657139042916576"
        "95611297819083231333712417021262788587241379160748107726961588205436522878234117360502168762815794245410267694"
        "9079561139688289977652684170267671086665");

    const BigInt expected(
        "35178794089140617763892502847033773129366887276363585223843607405139581939101742223758781680083855812008325921"
        "96244341960663062881308093710096035861237717951210473230685767972028577945900715411138507393346120236846619551"
        "99940586539448983130367657255631113648351265713443311095947981710559793445915825741460822042118601725099975398"
        "70672821983580340815569548197727401065889270501116105438726238452984553799473090189046546564555914483522342800"
        "14880483262398749153186355385515259976980327652888879836351588906334862068598930987803999631136888078272481730"
        "13122726366847594606071399473767046690857106765474431781239855416977035519074737282842279036098318439347425903"
        "06487667307098478677531061617162956050566407893284450645509557971551015422246140359372535833037208210380275123"
        "32770290825550522995985123405588708670749173673555960353273333624248964450926150048458536458551009278634901616"
        "50810472393487856722837562891684774068141083109098638604171531801613123459062264210037704649311370228900150440"
        "94172149598766429102819022808657156772272212348628996147230444413125268382419135959000510961199272592967183256"
        "60174209094882791851031066570379497474732446133848571937720830067858953489747538422756747460456708259043560819"
        "69137594673111240203469867178337684502106672444542051685620405213350266407270890349997503175854649796117220909"
        "66888506824215035323449838039479943602001857972481690335375704287471005298527406397106638807325685488064084217"
        "35213766764825097698422319664138469485678167143540622459616044783866147806329851155446349679996504015119617180"
        "02288915492965974631420365930868345690927290881629748413244721842353049079898197472977522895422873751480161656"
        "41310644509890020574969817678488300976398013898001787027788420699504078629219419084633758161640336323891445711"
        "13763394247159385268409928487293064037651291645625794601583128824031761054447519594590720538140490322046307858"
        "85609045822476500715052641913713017440815530559715997442657960421732838023287777914231797872133562238764413678"
        "54726228323732844475950762513039956584353318468654747484542679368501201727588932564505261484506407813776898794"
        "43185730313066815115656888211106714079012248046789725984684868717258300296895883384584262168240241195588415862"
        "57020759841282985381276052781549915407360559279591241938604260067112625518601758279512841011555114768605499146"
        "62928310386612773439960374822924647555511972675206964389524647189698368795748748551285355687080848527116498574"
        "55965822949479112959551613326193447034852279434953780786331853040949742513315624758480531942023608675644152034"
        "95504536754156250996677854027786698502339572429629834653455333884266558683653501789878146972732799349067639516"
        "64193361908763601579150865097392761047834894174526306460985752539799703535549392168005059173246008762765202989"
        "83314092172582676146460951966255160134884972956135387802149860548303307692868673328061052667105001458792534422"
        "53832803187561226233881476269895247424660416220667446119232265735580384770862292901198830267748081479230636329"
        "42747400302554697150123486945939998665669544463961494564075959771972261791287365001356077476933747298158092622"
        "54600114355308274317745539956788221886886256188605324022092862032312835382784681919951848227446983871480037340"
        "83834125352662901915982785376100450363247158458135022373010539032915670019549144449816490335812494600569523323"
        "36914606583095208771510252964329313480871904160547056306836522390350997748167788835541372918727649526933705085"
        "34812810227687505479324364868319926119017043867129079972806738557245802502975973727534905936027993058575009624"
        "71478926931456879837646298880914207905059358563476663458121450912070282197164458183330433333227448270243539931"
        "67366112918412848076147240114164839658128099973561045606850508286296931175700228419537008130986303411849103522"
        "21112400811463551605684637624849588556223286459078654726866718939639840756217433415239806026355567999113161271"
        "75256685553728176762124911323368965789166554263331823308190484682841139439062471923136982929538810239900686612"
        "3398947553866673941339603143445826458646");

    const auto result = a + b;
    EXPECT_EQ(result, expected);
    EXPECT_EQ(result, b + a);
}
