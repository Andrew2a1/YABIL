#include <gtest/gtest.h>
#include <yabil/bigint/BigInt.h>
#include <yabil/math/Math.h>

#include <limits>

using namespace yabil::math;

class MathFactorial_tests : public ::testing::Test
{
};

TEST_F(MathFactorial_tests, factorialOfZeroIsOne)
{
    const auto result = factorial(0);
    EXPECT_EQ(1, result.to_int());
}

TEST_F(MathFactorial_tests, factorialOfOneIsOne)
{
    const auto result = factorial(1);
    EXPECT_EQ(1, result.to_int());
}

TEST_F(MathFactorial_tests, factorialOfTwoIsTwo)
{
    const auto result = factorial(2);
    EXPECT_EQ(2, result.to_int());
}

TEST_F(MathFactorial_tests, factorialOfThreeIsSix)
{
    const auto result = factorial(3);
    EXPECT_EQ(6, result.to_int());
}

TEST_F(MathFactorial_tests, factorialOf12)
{
    EXPECT_EQ(factorial(12), yabil::bigint::BigInt("479001600"));
}

TEST_F(MathFactorial_tests, factorialOf385)
{
    EXPECT_EQ(
        factorial(385),
        yabil::bigint::BigInt(
            "7778925820002268285726252461141530914984705583003303410988268965025219496967908509462500416061477714284003"
            "2749700960018016880257150600760973387063625465151973977979879777238796637512249859636989563488396079390053"
            "4593215676317537476329592543545109117233552740097522503021673187473807397908143222788674481178587577495625"
            "9048468264892970278702226274605102072864218178764018228510100979403764338696505089275478841921622596018755"
            "9786147684262118679388088477835523732297315903458517415743852458900263831761206810157984267061814227152746"
            "5820874530480379765491556993265804183489474196132360265360619437032037025355682646278404978448305384867837"
            "7919149526133172785588246502708157480371204331197626694866791618777597426635292587027504092581724160000000"
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
}

TEST_F(MathFactorial_tests, factorialOf985)
{
    EXPECT_EQ(
        factorial(985),
        yabil::bigint::BigInt(
            "4471643344622686529752554512369084031306251694218472073479302071798821379253565968306613351265829848113613"
            "4459150374810209933236511879382474291093381628925737723417978006830066269937056415667500679564249640327327"
            "9205372687883966940981737891393816736049254956385702748093222920840287189302031000487091274310831363956246"
            "7568815184767444430124969878931826769411395283201772923797496287652305578212640272232625863644902135978542"
            "1562396880951093189166460381215976177948287792724892935547820804573240368372188948582707526856083497448654"
            "4829235266196102803632524434040137986305700077696231465933563139319339070704840202057695849216180915801503"
            "1875829384131038188722552880706007544514557426569986905605626900372302810612762466439848486521087110658665"
            "5515940141358766130471783658559981884563846578863597225260519436665632090219238250237633889169262706554561"
            "7079846578950985719068528736535884026409082217033256791635413341560225019935756241171049623330728724259722"
            "8742871075300345121681247261106775054768815315190894514265511639663901339639134825860179005982876978199104"
            "0653681566831354379907680648759646296751115204746620795381137901260217806310297260592591459682232113169311"
            "1321315266210511539459216698547963258815102042213094040041275663824029817377420254900418872776191285636545"
            "7612100383596040699067273160420626138135355126355344685806201748827467414161578533736705029371678259258339"
            "2200276972656278895465139141215975141133787563924516247115357176570114524021916313281219634394770782708962"
            "8135620301200554982941551872500693935045422376090798752481818786809037804194900524161563708180297114912370"
            "2908603686825577260270011541322100782816567904481307310341564423770887624520536285585934845224080153169601"
            "7060810725557253984243300199757837782033064834701726176453529790603214704755478491373461991549058550649572"
            "4158331835222700439508059218926052422974264313593563551170383208614375924577035411130893973042810557679570"
            "9468216581949194749806482897484797983635929591303935008587226251633770258261152754887888328982870974930309"
            "3579644035026003143884345702970942915332150364175551087178051297795756849349598002855360160527139585097451"
            "5621752911439479666302324909556994113771701963622740608537517452808049704606798423040846582069165293336669"
            "9602978870786671988002110382023879767290720902814105600000000000000000000000000000000000000000000000000000"
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
}
