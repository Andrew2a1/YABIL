
#include <gtest/gtest.h>
#include <yabil/bigint/BigIntBase.h>
#include <yabil/compile_time/ConstBigInt.h>
#include <yabil/compile_time/Literals.h>

namespace yabil::compile_time
{

using namespace yabil::compile_time::literals;

class ConstBigIntDivision_tests : public ::testing::Test
{
};

TEST_F(ConstBigIntDivision_tests, zeroDividedByAnyNumberIsZero)
{
    EXPECT_TRUE(0_bi / 1_bi == 0_bi);
    EXPECT_TRUE(0_bi / 1102930_bi == 0_bi);
    EXPECT_TRUE(0_bi / -120_bi == 0_bi);
}

TEST_F(ConstBigIntDivision_tests, divisionByOneDoesNotChangeNumber)
{
    EXPECT_TRUE(2_bi / 1_bi == 2_bi);
    EXPECT_TRUE(1_bi / 1_bi == 1_bi);
    EXPECT_TRUE(184_bi / 1_bi == 184_bi);
    EXPECT_TRUE(-184_bi / 1_bi == -184_bi);
    EXPECT_TRUE(-184_bi / -1_bi == 184_bi);
    EXPECT_TRUE(184_bi / -1_bi == -184_bi);
    EXPECT_TRUE(198552133531985521335389841673462708984167346270_bi / 1_bi ==
                198552133531985521335389841673462708984167346270_bi);
}

TEST_F(ConstBigIntDivision_tests, zeroModuloAnyNumberIsZero)
{
    EXPECT_TRUE(0_bi % 1_bi == 0_bi);
    EXPECT_TRUE(0_bi % 1102930_bi == 0_bi);
    EXPECT_TRUE(0_bi % -120_bi == 0_bi);
}

TEST_F(ConstBigIntDivision_tests, ModuloByOneReturns0)
{
    EXPECT_TRUE(2_bi % 1_bi == 0_bi);
    EXPECT_TRUE(1_bi % 1_bi == 0_bi);
    EXPECT_TRUE(184_bi % 1_bi == 0_bi);
    EXPECT_TRUE(-184_bi % 1_bi == 0_bi);
    EXPECT_TRUE(-184_bi % -1_bi == 0_bi);
    EXPECT_TRUE(184_bi % -1_bi == 0_bi);
    EXPECT_TRUE(198552133531985521335389841673462708984167346270_bi % 1_bi == 0_bi);
}

TEST_F(ConstBigIntDivision_tests, canDivTwoSmallNumbers)
{
    EXPECT_TRUE(1_bi / 2_bi == 0_bi);
    EXPECT_TRUE(1_bi % 2_bi == 1_bi);
}

TEST_F(ConstBigIntDivision_tests, canDivTwoBigNumbers)
{
    EXPECT_TRUE(10928490128490812093812903_bi / 128371823_bi == 85131533331039570_bi);
    EXPECT_TRUE(10928490128490812093812903_bi % 128371823_bi == 7776793_bi);
    EXPECT_TRUE(192381902390120000_bi / 124109200000_bi == 1550101_bi);
    EXPECT_TRUE(192381902390120000_bi % 124109200000_bi == 107360920000_bi);
    EXPECT_TRUE(-1923819023901200000000_bi / 1241092000000000_bi == -1550101_bi);
    EXPECT_TRUE(-1923819023901200000000_bi % 1241092000000000_bi == -1073609200000000_bi);
    EXPECT_TRUE(1923819023901200000000_bi / -1241092000000000_bi == -1550101_bi);
    EXPECT_TRUE(1923819023901200000000_bi % -1241092000000000_bi == 1073609200000000_bi);
    EXPECT_TRUE(-1923819023901200000000_bi / -1241092000000000_bi == 1550101_bi);
    EXPECT_TRUE(-1923819023901200000000_bi % -1241092000000000_bi == -1073609200000000_bi);
    EXPECT_TRUE(129319_bi / 12410920_bi == 0_bi);
    EXPECT_TRUE(129319_bi % 12410920_bi == 129319_bi);
    EXPECT_TRUE(2048_bi / 2_bi == 1024_bi);
    EXPECT_TRUE(2048_bi % 2_bi == 0_bi);

    EXPECT_TRUE(
        12712642178621745214167236126412748678126782148251752175635217357125381236187236512678312857198272713872183_bi /
            123216874726781263781628736219678531949374081935798615619386573625_bi ==
        103172899059568864307005240092688842441637_bi);

    EXPECT_TRUE(
        12712642178621745214167236126412748678126782148251752175635217357125381236187236512678312857198272713872183_bi %
            123216874726781263781628736219678531949374081935798615619386573625_bi ==
        41901113651699220090698360505119628087373313170391250252247848058_bi);

    EXPECT_TRUE(
        2712642178621745214167236126412700048678126782148251752175635217357125381236187236512678312857198272713872183_bi /
            287362196785319493745798615619386573625_bi ==
        9439801786622221017674810050846457664024907903528889626985672190493594_bi);

    EXPECT_TRUE(
        2712642178621745214167236126412700048678126782148251752175635217357125381236187236512678312857198272713872183_bi %
            287362196785319493745798615619386573625_bi ==
        53244412639911237906247612787542013933_bi);
}

}  // namespace yabil::compile_time