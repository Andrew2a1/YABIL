#include <gtest/gtest.h>
#include <yabil/compile_time/ConstBigInt.h>
#include <yabil/compile_time/Literals.h>
#include <yabil/compile_time/detail/BigIntData.h>

namespace yabil::compile_time
{

using namespace yabil::compile_time::literals;

class ConstBigIntSubtractionGeneratedTests : public ::testing::Test
{
};

TEST_F(ConstBigIntSubtractionGeneratedTests, arithmetic)
{
    EXPECT_TRUE((39_bi - 62_bi) == -23_bi);
    EXPECT_TRUE((-574_bi - -158_bi) == -416_bi);
    EXPECT_TRUE((-4462_bi - -2039_bi) == -2423_bi);
    EXPECT_TRUE((-69956_bi - 52258_bi) == -122214_bi);
    EXPECT_TRUE((-991320_bi - -741985_bi) == -249335_bi);
    EXPECT_TRUE((3972000_bi - 3063202_bi) == 908798_bi);
    EXPECT_TRUE((75723540_bi - -18110218_bi) == 93833758_bi);
    EXPECT_TRUE((-368746198_bi - -432337914_bi) == 63591716_bi);
    EXPECT_TRUE((-8922858147_bi - 1203860050_bi) == -10126718197_bi);
    EXPECT_TRUE((90970647009_bi - -33172749083_bi) == 124143396092_bi);
    EXPECT_TRUE((-628400124601_bi - -119172008434_bi) == -509228116167_bi);
    EXPECT_TRUE((2923892801151_bi - -8137101715994_bi) == 11060994517145_bi);
    EXPECT_TRUE((19144461769479_bi - -68861177702716_bi) == 88005639472195_bi);
    EXPECT_TRUE((552373924883406_bi - 859514882723580_bi) == -307140957840174_bi);
    EXPECT_TRUE((2897341392448944_bi - 7743883571232773_bi) == -4846542178783829_bi);
    EXPECT_TRUE((95039741424058529_bi - 82377348582899848_bi) == 12662392841158681_bi);
    EXPECT_TRUE((700181070716040137_bi - 735583041040887264_bi) == -35401970324847127_bi);
    EXPECT_TRUE((8064718410555795531_bi - 4848478326697410601_bi) == 3216240083858384930_bi);
    EXPECT_TRUE((51017579414633222646_bi - -10289779954818706088_bi) == 61307359369451928734_bi);
    EXPECT_TRUE((-555869670590874127001_bi - 588515292552471033960_bi) == -1144384963143345160961_bi);
    EXPECT_TRUE((-1914435264024374626281_bi - -1151205723156958980073_bi) == -763229540867415646208_bi);
    EXPECT_TRUE((-47556143229888169647569_bi - -27316508908397826859557_bi) == -20239634321490342788012_bi);
    EXPECT_TRUE((762529278871584002215884_bi - 483633282306625078662505_bi) == 278895996564958923553379_bi);
    EXPECT_TRUE((-1329654504563133087923860_bi - -4755837232943381339685913_bi) == 3426182728380248251762053_bi);
    EXPECT_TRUE((76353645863743750779303613_bi - 69243105951543478816858219_bi) == 7110539912200271962445394_bi);
    EXPECT_TRUE((-494332858760974494660955150_bi - -688360056988494489270481172_bi) == 194027198227519994609526022_bi);
    EXPECT_TRUE((-5298266527499443266109432807_bi - -6013821273467799041316791541_bi) ==
                715554745968355775207358734_bi);
    EXPECT_TRUE((-89052552097201767190349475482_bi - -58800016229637743125526196867_bi) ==
                -30252535867564024064823278615_bi);
    EXPECT_TRUE((370135020067331229310980820589_bi - 621951684060881090635202531291_bi) ==
                -251816663993549861324221710702_bi);
    EXPECT_TRUE((-2659072532864531581371767409900_bi - 2592395762045173841570401923319_bi) ==
                -5251468294909705422942169333219_bi);
    EXPECT_TRUE((66836156527049531324889200814845_bi - 12175515601075013888856024119679_bi) ==
                54660640925974517436033176695166_bi);
    EXPECT_TRUE((-525443544482521083566802533439476_bi - -763335211295402770733728553063480_bi) ==
                237891666812881687166926019624004_bi);
    EXPECT_TRUE((-6749320810886164236606455278020098_bi - -8334995139863661381039222999076749_bi) ==
                1585674328977497144432767721056651_bi);
    EXPECT_TRUE((46941479163323125439167326280810446_bi - 61206324221642087260759503032536800_bi) ==
                -14264845058318961821592176751726354_bi);
    EXPECT_TRUE((-298259509745810999848565857270772443_bi - 715323066980098917637973380300823944_bi) ==
                -1013582576725909917486539237571596387_bi);
    EXPECT_TRUE((-7639016086739156684904943944955089723_bi - -2156515725950178267451175664805957437_bi) ==
                -5482500360788978417453768280149132286_bi);
    EXPECT_TRUE((61823475908291933473420438298908584915_bi - 26075327539756966791097020410187329643_bi) ==
                35748148368534966682323417888721255272_bi);
    EXPECT_TRUE((116092840309387152465041802038822504347_bi - 979356925257268226007158174506844422884_bi) ==
                -863264084947881073542116372468021918537_bi);
    EXPECT_TRUE((8813474594521878403224427626341874992558_bi - 5932725800272590292171380346567944146648_bi) ==
                2880748794249288111053047279773930845910_bi);
    EXPECT_TRUE((30450660621969885263496295188948486552882_bi - -56094298651395647958770508444892016477067_bi) ==
                86544959273365533222266803633840503029949_bi);
    EXPECT_TRUE((-733406658716180423192208408146457547973275_bi - 562906562850626768014018712807892350854483_bi) ==
                -1296313221566807191206227120954349898827758_bi);
    EXPECT_TRUE((-9518965194494560704169335414296230851775941_bi - 9095776717517324127906295443489505847926021_bi) ==
                -18614741912011884832075630857785736699701962_bi);
    EXPECT_TRUE((12205680549618535927945097282490245243581943_bi - 41578935082359978596989154079585090147811619_bi) ==
                -29373254532741442669044056797094844904229676_bi);
    EXPECT_TRUE((446480510817675981429221587075750543522588417_bi - 377202232294875844285239002127740187419903851_bi) ==
                69278278522800137143982584948010356102684566_bi);
    EXPECT_TRUE(
        (5762220957161743658436813742610692781243284990_bi - -7350044012220122085580059049897141794452809316_bi) ==
        13112264969381865744016872792507834575696094306_bi);
    EXPECT_TRUE(
        (33499157404517102409171611871631148692413244617_bi - 31226075112009968280308544376790559320354870595_bi) ==
        2273082292507134128863067494840589372058374022_bi);
}

}  // namespace yabil::compile_time