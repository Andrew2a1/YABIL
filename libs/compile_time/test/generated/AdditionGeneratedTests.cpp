#include <gtest/gtest.h>
#include <yabil/compile_time/BigIntData.h>
#include <yabil/compile_time/ConstBigInt.h>
#include <yabil/compile_time/Literals.h>

namespace yabil::compile_time
{

using namespace yabil::compile_time::literals;

class ConstBigIntAdditionGeneratedTests : public ::testing::Test
{
};

TEST_F(ConstBigIntAdditionGeneratedTests, arithmetic)
{
    EXPECT_TRUE((48_bi + 43_bi) == 91_bi);
    EXPECT_TRUE((152_bi + -957_bi) == -805_bi);
    EXPECT_TRUE((9171_bi + 1119_bi) == 10290_bi);
    EXPECT_TRUE((-74525_bi + -76490_bi) == -151015_bi);
    EXPECT_TRUE((-480279_bi + 180566_bi) == -299713_bi);
    EXPECT_TRUE((8796365_bi + 3214659_bi) == 12011024_bi);
    EXPECT_TRUE((54097583_bi + -29901529_bi) == 24196054_bi);
    EXPECT_TRUE((-341291936_bi + -523764932_bi) == -865056868_bi);
    EXPECT_TRUE((-7454464367_bi + -9458749493_bi) == -16913213860_bi);
    EXPECT_TRUE((-62325452749_bi + 39590568070_bi) == -22734884679_bi);
    EXPECT_TRUE((292243472836_bi + 627847670556_bi) == 920091143392_bi);
    EXPECT_TRUE((2563278797163_bi + 3750279243318_bi) == 6313558040481_bi);
    EXPECT_TRUE((91929680471861_bi + 73570940029690_bi) == 165500620501551_bi);
    EXPECT_TRUE((-275831360168583_bi + 261496303734762_bi) == -14335056433821_bi);
    EXPECT_TRUE((-3260647294031949_bi + -4533176034520053_bi) == -7793823328552002_bi);
    EXPECT_TRUE((-85254684038464744_bi + 35283944180869816_bi) == -49970739857594928_bi);
    EXPECT_TRUE((510815683214239583_bi + -982873719752440960_bi) == -472058036538201377_bi);
    EXPECT_TRUE((-5338423558772881768_bi + 1253168480498604293_bi) == -4085255078274277475_bi);
    EXPECT_TRUE((-74693474041003159485_bi + 63402969866584628661_bi) == -11290504174418530824_bi);
    EXPECT_TRUE((-224314811610315819810_bi + -308354592510872911021_bi) == -532669404121188730831_bi);
    EXPECT_TRUE((-6533065457045305737572_bi + 3278589533676581744480_bi) == -3254475923368723993092_bi);
    EXPECT_TRUE((18783192259012338551783_bi + -90521907784788834004010_bi) == -71738715525776495452227_bi);
    EXPECT_TRUE((229387519704349990146793_bi + -995079438357648585008415_bi) == -765691918653298594861622_bi);
    EXPECT_TRUE((-8287953702537488586991694_bi + -2288402081359609298997759_bi) == -10576355783897097885989453_bi);
    EXPECT_TRUE((75601578335847104532608728_bi + 21877614182464527382304255_bi) == 97479192518311631914912983_bi);
    EXPECT_TRUE((-806459092976788170627463761_bi + 195352172500693207618365634_bi) == -611106920476094963009098127_bi);
    EXPECT_TRUE((3649629510648255489163281782_bi + -8810114032280779842740993801_bi) ==
                -5160484521632524353577712019_bi);
    EXPECT_TRUE((-52690401457344734090363822156_bi + -26042413851975272251643772856_bi) ==
                -78732815309320006342007595012_bi);
    EXPECT_TRUE((401263692444628895158900968104_bi + 254780715210076100726806511265_bi) ==
                656044407654704995885707479369_bi);
    EXPECT_TRUE((5865298321927957129080410274754_bi + 3064433365235857399403913271808_bi) ==
                8929731687163814528484323546562_bi);
    EXPECT_TRUE((23728308232422361583540315302613_bi + -56990442419840442214433950825716_bi) ==
                -33262134187418080630893635523103_bi);
    EXPECT_TRUE((-790553681016337338922704633393911_bi + -887567322016164368773535886340767_bi) ==
                -1678121003032501707696240519734678_bi);
    EXPECT_TRUE((-4002272267546968068912648349110815_bi + -6434963583863758795946472409994754_bi) ==
                -10437235851410726864859120759105569_bi);
    EXPECT_TRUE((-85470575769120387857464757921668253_bi + -47638436720446619848118473648813572_bi) ==
                -133109012489567007705583231570481825_bi);
    EXPECT_TRUE((880600799312707543152157610220700439_bi + 494573683735383722913552804056674901_bi) ==
                1375174483048091266065710414277375340_bi);
    EXPECT_TRUE((-1486929112707729349541122666642564450_bi + -3598262912398140618369570571206944711_bi) ==
                -5085192025105869967910693237849509161_bi);
    EXPECT_TRUE((-78780092067563262333921129862151027369_bi + -20587802755312643947453852195247304142_bi) ==
                -99367894822875906281374982057398331511_bi);
    EXPECT_TRUE((429448446936757773255104748242008705362_bi + 199613105841519783542338029699035392008_bi) ==
                629061552778277556797442777941044097370_bi);
    EXPECT_TRUE((-4182731095118391116725441549666412626789_bi + -5947249643453526342165456214307478317803_bi) ==
                -10129980738571917458890897763973890944592_bi);
    EXPECT_TRUE((-90676358721860038454354097738012684005380_bi + 16670929331210595836574306346995410397317_bi) ==
                -74005429390649442617779791391017273608063_bi);
    EXPECT_TRUE((880483992814863730838207328381547393778673_bi + -238816236928569582455638990874482999285580_bi) ==
                641667755886294148382568337507064394493093_bi);
    EXPECT_TRUE((-6124538243818512169024853975631865245377323_bi + 2180509739287258143940716290219989369956224_bi) ==
                -3944028504531254025084137685411875875421099_bi);
    EXPECT_TRUE((13275237922924535650115000842373671207144991_bi + -12305979569248859577269322458499102700431682_bi) ==
                969258353675676072845678383874568506713309_bi);
    EXPECT_TRUE(
        (-122555823228375344461079524669118822229937770_bi + -539118488236028152345939772636189978393859091_bi) ==
        -661674311464403496807019297305308800623796861_bi);
    EXPECT_TRUE(
        (4113208431462750635516369834349812112613089532_bi + 4205208868303342538575671110463480210748911043_bi) ==
        8318417299766093174092040944813292323362000575_bi);
    EXPECT_TRUE(
        (49855119111449221615330277125185454483724220724_bi + -67610770754758858637048256564174796134134997636_bi) ==
        -17755651643309637021717979438989341650410776912_bi);
}

}  // namespace yabil::compile_time